(defun create-file-unless-exists (filename)
  (unless (file-exists-p filename)
    (write-region "" nil filename)))

(defun delete-current-file-and-buffer ()
  (interactive)
  (let ((filename (buffer-file-name)))
    (delete-file (buffer-file-name))
    (kill-buffer)
    (message "Deleted '%s'" filename)))

(defun load-files-in-directory (directory)
  (dolist (filename (directory-files directory t))
    (unless (file-directory-p filename)
      (load filename))))

(defun rename-current-file-and-switch-buffer (new-name)
  (interactive "FNew name: ")
  (let ((filename (buffer-file-name)))
    (when (buffer-modified-p)
      (save-buffer))
    (rename-file filename new-name t)
    (kill-buffer (current-buffer))
    (find-file new-name)
    (message "Renamed '%s' to '%s'" filename new-name)))

(defmacro with-suppressed-message (&rest body)
  `(let ((inhibit-message t))
    ,@body))
