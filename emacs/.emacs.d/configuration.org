#+TITLE: Liam's Emacs Configuration

* Package Management

** =package=

Emacs has a built-in package management solution called,
appropriately, =package=. We start by installing it and adding some
repositories so that more packages can be downloaded. The first is the
official GNU package repository, and the second, MELPA, is a popular
community driven repository.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+END_SRC

** =use-package=

=package= provides an interface for installing packages, but it
becomes tedious to manage for multiple files. Instead, I use the
=use-package= macro to install and configure packages. We need to
install use-package and configure it to always "ensure" packages are
installed if they're not already.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

* Utility Functions

To get them out of the way and in case we need to use them later, here
we define a few useful functions.

#+BEGIN_SRC emacs-lisp
  (defun util/delete-current-file ()
    (interactive)
    (delete-file (buffer-file-name))
    (kill-buffer))

  (defun util/kill-other-buffers ()
    "Kill all buffers other than the current."
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

  (defun util/rename-current-file (new-name)
    (interactive "FNew name: ")
    (let ((filename (buffer-file-name)))
      (when (buffer-modified-p)
	(save-buffer))
      (rename-file filename new-name t)
      (kill-buffer (current-buffer))
      (find-file new-name)
      (message "Renamed '%s' to '%s'" filename new-name)))

  (defun util/test-project ()
    "Test the current project."
    (interactive)
    (cond ((eq major-mode 'ruby-mode) (minitest-verify-all))))

  (defun util/test-file ()
    "Test the current file."
    (interactive)
    (cond ((eq major-mode 'ruby-mode) (minitest-verify))))

  (defun util/transparency (amount)
    "Set Emacs to be (100-AMOUNT)% transparent."
    (interactive "nTransparency Amount: ")
    (set-frame-parameter (selected-frame) 'alpha amount))
#+END_SRC

* Systemic Changes / Packages

Here is where we start to install packages that add large pieces of
functionality.

** =evil=

I came from vim, so I'm familiar with (and fond of) vim's "language"
of sorts for editing text. We install =evil=, which emulates vim, and
=evil-collection=, to get =evil= bindings in most modes.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    :config
    (evil-mode))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-surround
    :config
    (global-evil-surround-mode))
#+END_SRC

** Fuzzy Finding

=ido= is a built-in completion engine for Emacs. It provides fuzzy
searching, though it's not that good, so we replace it with =flx=.
We also enable =ido= in other places like the M-x menu.

#+BEGIN_SRC emacs-lisp
  (use-package ido
    :config
    (setq ido-enable-flex-matching t
          ido-everywhere t)
    (ido-mode))

  (use-package ido-vertical-mode
    :after ido
    :config
    (setq ido-vertical-define-keys 'C-n-and-C-p-only)
    (ido-vertical-mode))

  (use-package flx-ido
    :after ido
    :config
    (setq flx-ido-use-faces nil)
    (flx-ido-mode))

  (use-package ido-completing-read+
    :after ido
    :config
    (ido-ubiquitous-mode))

  (use-package smex
    :after ido
    :config
    (smex-initialize))
#+END_SRC

** Searching

We install =ag=, a way to use the silver searcher.

#+BEGIN_SRC emacs-lisp
  (use-package ag)
#+END_SRC

** Project Management

=projectile= is a project management library. I only use a few
features from it, so I'm trying to find alternatives, but for now this
is the best option. We install, configure it to use =ido= for
completion, set it to open the root directory when changing projects,
and don't require the folder to be a project to take advantage of
=projectile='s features.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (setq projectile-completion-system 'ido)
    (setq projectile-switch-project-action 'projectile-dired)
    (setq projectile-require-project-root nil)
    (projectile-mode))
#+END_SRC

** Git

=magit= is a wonderful interface for using git in Emacs. We install
=evil= bindings for it and start the commit message in insert mode.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (setq magit-completing-read-function 'magit-ido-completing-read)
    (add-hook 'with-editor-mode-hook 'evil-insert-state))
  (use-package evil-magit
    :after magit)
#+END_SRC

* Language-Specific Packages

** Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode)
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC

** Ruby

I use =chruby= to change Ruby versions, so we install that and tell it
to use the correct Ruby version from whatever =.ruby-version= file is
correct according to =chruby=.

I also use =minitest= to test my Ruby projects, so we install and
enable a mode for it.

#+BEGIN_SRC emacs-lisp
  (use-package chruby
    :config
    (chruby-use-corresponding))

  (use-package minitest
    :config
    (add-hook 'ruby-mode-hook 'minitest-mode))
#+END_SRC

** Org

Show pretty bullets instead of asteriks, and a downward arrow when a
section has content.

#+BEGIN_SRC emacs-lisp
  (use-package org)

  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC
* Quality of Life

** Startup

I dislike the default starting screen, so here we replace it with a
scratch =org-mode= buffer.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t
        initial-scratch-message nil
        initial-major-mode 'org-mode)
#+END_SRC

** Bell

By default, Emacs (and terminals in general) play a "bell" sound when
an operation is not possible or an error occurs. Emacs provides a
setting to disable it, but it's then replaced by a "flash" of sorts,
which I also don't like. Instead, when Emacs tries to ring the bell,
we do nothing.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Modeline

I don't like seeing all the minor modes in the modeline, so I use the
=minions= package to hide all of them. By default, the package uses
the final parenthesis to make a smilie face, but I don't want that, so
we set the delimiters of the mode to nothing, since only the major
mode will ever be shown.

#+BEGIN_SRC emacs-lisp
  (use-package minions
    :config
    (setq minions-mode-line-lighter ""
          minions-mode-line-delimiters '("" . ""))
    (minions-mode))
#+END_SRC

** Spaces/Tabs

I use 2 spaces for indentation, but by default Emacs uses tabs. We set
Emacs to use 2 spaces instead.

#+BEGIN_SRC emacs-lisp
  (setq indent-tabs-mode nil
        tab-stop-lisp (number-sequence 2 60 2))
#+END_SRC

** Backups and Autosaving

By default, Emacs leaves autosave and backup files scattered across
the filesystem next to whatever file they're backing up or autosaving.
I dislike the clutter this creates, so instead we set them to be saved
in dedicated directories in Emacs' configuration folder.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC

** Yes and No

Emacs often asks "yes" or "no" questions, but unlike most other
programs, doesn't accept "y" and "n" as answers. We alias the
predicate function that checks this to accept "y" or "n" as well.

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Default Shell

I use =ansi-term= for most of my terminal uses because it allows me to
use Emacs keybindings and not have to leave Emacs, but it annoyingly
asks every time which shell I want to use. Since I use =bash=, I set
Emacs to use it every time I open =ansi-term=.

#+BEGIN_SRC emacs-lisp
  (defvar default-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list default-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

** Follow Symlinks

Emacs usually asks for confirmation if you want to follow a symlink,
but I always want to transparently follow it, so we tell Emacs to just
go ahead and follow the link without confirmation.

#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

** Delete Trailing Whitespace

As mentioned in the last section, I highlight trailing whitespace so
that I can get rid of it. To help me with that, we tell Emacs to
automatically delete trailing whitespace when saving a buffer.

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Sentence Spacing

We tell Emacs that sentences don't end with double spaces.

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

** Always End With a Newline

It's good convention to end files with a newline, so we set Emacs to
automatically do so.

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

** Dired File Sizes

Make dired use the -h option, which makes file sizes use human
readable units (KB, MB, etc).

#+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "-alh")
#+END_SRC

** Auto Reload Buffers

Always reload buffers when the underlying file changes.

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode)
#+END_SRC

** Colored Parentheses

We install a package to color code matching parentheses, which while
helpful in normal code, is especially helpful in Lisp languages.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimeters-mode))
#+END_SRC
* Visuals

** Theme

The biggest visual change is the theme. As of now, I use
=solarized-dark=, mostly because I can also configure everything in
Xorg to use the same colors. I like highlighting the modeline a
grayish-white color, so we enable that. By default, solarized also
changes the font face and size of headlines in org mode, which I don't
like, so we disable it.

#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :config
    (setq solarized-high-contrast-mode-line t
          solarized-use-variable-pitch nil
          solarized-scale-org-headlines nil)
    (load-theme 'solarized-dark t))
#+END_SRC

** Remove Bars

I find the graphical bars clutter, so here we remove them.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** Highlight Line

I find highlighting the current line helpful for finding the point,
and Emacs provides built-in functionality to do just that, so here we
enable it.

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC

** Whitespace

I use the =whitespace= package to highlight characters past the 80th
column (my personal line length limit). However, for some reason
whatever I set =whitespace-line-column= to, =whitespace= only
highlights characters 10 columns after that, so here we set it to 70.
Also, we set whitespace to highlight tab characters, and trailing
spaces.

#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :config
  (setq whitespace-style '(face
			   trailing
                           space-before-tab
			   space-after-tab
			   lines-tail)
        whitespace-line-column 70)
  (global-whitespace-mode))
#+END_SRC

* Keybindings

Finally, we will define all the keybindings for the various shortcuts
and commands that I use.

** =which-key=

This package shows a list of all the keybindings available when you
press a prefix key. It's very helpful for learning the bindings.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC
** Unbindings

Though I try to stick mostly to emacs keybindings, there are a few of
of my custom ones that differ slightly that I'd like to get used to.
We unbind the ones that I keep accidentally pressing here.

#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-x C-s"))
  (global-unset-key (kbd "C-x C-c"))
#+END_SRC

** Bindings

#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global
    (kbd "C-q") 'save-buffers-kill-terminal
    (kbd "C-s") 'save-buffer
    (kbd "C-S-f") 'projectile-ag
    (kbd "C-f") 'isearch-forward
    (kbd "C-r") 'query-replace
    (kbd "C-S-r") 'projectile-replace
    (kbd "C-S-p") 'projectile-switch-project
    (kbd "C-p") 'projectile-find-file

    (kbd "C-,") 'previous-buffer
    (kbd "C-.") 'next-buffer

    (kbd "M-x") 'smex
    (kbd "C-x g") 'magit

    (kbd "C-c t p") 'util/test-project
    (kbd "C-c t f") 'util/test-file)
#+END_SRC
